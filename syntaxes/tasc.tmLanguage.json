{
		"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
		"name": "Tasc",
		"patterns": [{ "include": "#expression" }],
		"repository": {
			"comments": {
				"patterns": [
					{
						"name": "comment.line.double-slash.tasc",
						"match": "//.*"
					}
				]
			},
			"expression-bare": {
				"patterns": [
					{ "include": "#literal" },
					{ "include": "#variables" },
					{ "include": "#string" },
					{ "include": "#illegal-operator" },
					{ "include": "#operator" },
					{ "include": "#round-braces" },
					{ "include": "#function-call" },
					{ "include": "#builtin-functions" },
					{ "include": "#illegal-names" },
					{ "include": "#constants" }
				]
			},
			"variables": {
				"patterns": [
					{ "name": "variable.control.tasc", "match": "\\b[a-z]+[a-zA-Z0-9-_]*\\b(?=\\.)" },
					{ "name": "variable.control.tasc", "match": "(?<=(?:\\(|\\,)\\s*)\\b[a-z]+[a-zA-Z0-9-_]*\\b(?=\\s*(?:\\)|\\,))" }
				]
			},
			"expression": {
				"patterns": [
					{ "include": "#comments" },
					{ "include": "#expression-bare" }
				]
			},
			"constants": {
				"name": "constant.other.caps.tasc",
				"match": "\\b([A-Z_]*[A-Z_0-9]*)\\b"
			},
			"round-braces": {
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": { "name": "punctuation.parenthesis.begin.tasc" }
				},
				"endCaptures": {
					"1": { "name": "punctuation.parenthesis.end.tasc" }
				},
				"patterns": [{ "include": "#expression" }]
			},
			"operator": {
				"name": "keyword.operator.access.tasc",
				"match": "\\b(\\.)\\b"
			},
			"literal": {
				"patterns": [
					{ "name": "constant.language.tasc", "match": "\\b(true|false)\\b" },
					{ "include": "#number" }
				]
			},
			"number": {
				"name": "constant.numeric.tasc",
				"patterns": [
					{ "include": "#number-dec" },
					{ "name": "invalid.illegal.name.tasc", "match": "\\b[0-9]+\\w+" }
				]
			},
			"number-dec": {
				"name": "constant.numeric.dec.tasc",
				"match": "((?:(?<![_a-zA-Z.\\d-])-\\d+\\.?\\d*)|(?:(?<![_a-zA-Z.\\d-])\\d+\\.?\\d*))(?![_a-zA-Z.\\d])"
			},
			"string": {
				"name": "string.quoted.double.tasc",
				"begin": "\"",
				"end": "\"",
				"patterns": [
					{
						"name": "constant.character.escape.tasc",
						"match": "\\\\."
					}
				]
			},
			"parameters": {
				"name": "meta.function.parameters.tasc",
				"begin": "(\\()",
				"end": "(\\))",
				"beginCaptures": {
					"1": { "name": "punctuation.definition.parameters.begin.tasc" }
				},
				"endCaptures": {
					"1": { "name": "punctuation.definition.parameters.end.tasc" }
				},
				"patterns": [
					{ "include": "#illegal-names" },
					{
						"match": "(?x) ([a-zA-Z_]\\w*)\\s* (?: (,) | (?=[)\n]))",
						"captures": {
							"1": { "name": "variable.parameter.function.language.tasc" },
							"2": { "name": "punctuation.seperator.parameters.tasc" }
						}
					}
				]
			},
			"function-call": {
				"name": "meta.function-call.tasc",
				"begin": "\\b(?=([a-zA-Z_]\\w*)\\s*(\\())",
				"end": "(\\))",
				"endCaptures": {
					"1": { "name": "punctuation.definition.arguments.end.tasc" }
				},
				"patterns": [
					{ "include": "#function-name" },
					{ "include": "#function-arguments" }
				]
			},
			"function-name": {
				"patterns": [
					{ "include": "#builtin-functions" },
					{
						"name": "invalid.illegal.name.tasc",
						"match": "(?<=^|\\.)([a-zA-Z_0-9\\-]+)(?=\\s*\\()"
					}
				]
			},
			"function-arguments": {
				"begin": "(\\()",
				"end": "(?=\\))(?!\\)\\s*\\()",
				"beginCaptures": {
					"1": { "name": "punctuation.definition.arguments.begin.tasc" }
				},
				"contentName": "meta.function-call.arguments.tasc",
				"patterns": [
					{ "name": "punctuation.seperator.arguments.tasc", "match": "(,)" },
					{ "include": "#illegal-names" },
					{ "include": "#expression" },
					{
						"match": "\\s*(\\))\\s*(\\()",
						"captures": {
							"1": { "name": "punctuation.definition.arguments.end.tasc" },
							"2": { "name": "punctuation.definition.arguments.begin.tasc" }
						}
					}
				]
			},
			"builtin-functions": {
				"patterns": [
					{ "include": "#illegal-names" },
					{
						"name": "support.function.builtin.tasc",
						"match": "\\b(warp|warp_relative|warp_relative_level|warp_node|warp_node_if_off_screen|move|moveRelativeX|move_relative_x|move_relative|moveNode|move_node|move_node_smart|turn_move_node_smart|velX|vel_x|velY|vel_y|aclX|acl_x|aclY|acl_y|jump|anim|state|sstate|state_and_wait|sstate_and_wait|chat|temp_chat|remote_chat|flip|flip_towards|flippable|acl|visible|interactable|immovable|moves|camera_follow|emote|alpha|giveMoney|gravity|glow|update|board_elevator|board|turn_on|turnOn|turn_off|turnOff|landed|landing_check|is_touching_ground|anim_is|anim_check|frame_is|frame_check|on_screen|is_on_screen|not_on_screen|is_not_on_screen|tween_point|tween_waypoint|center_on|front_fx|back_fx|on_variable_frame|is_on_variable_frame|not_on_variable_frame|is_not_on_variable_frame|quip|waitNext|waitUntilPlayerIdle|wait|unpause|pause|sound|shake|flash|add_flag|del_flag|main_quest|give_item|take_item|transition_in|transition_out|show_hud|hide_hud|reset_cam|dlg_cam_follow|level_transition|force_end|ctrl_lock|ctrl_unlock|always_active_level|remove_always_active_level)\\b"
					}
				]
			},
			"illegal-names": {
				"name": "invalid.illegal.name.tasc",
				"match": "(?x)\\b(and | const | func | else | for | if | in | is | not | or | break | continue | return | var | array | while)\\b"
			},
			"illegal-operator": {
				"patterns": [
					{
						"name": "invalid.illegal.operator.tasc",
						"match": "(?x)\\b(and | or | not | in | is | << | >> | & | \\| | \\^ | ~ | \\*\\* | \\* | \\+ | % | / | != | == | >= | <= | < | >)(?!\\s*:)\b"
					},
					{ "name": "invalid.illegal.operator.tasc", "match": "!\\b" }
				]
			}
		},
		"scopeName": "source.tasc"
	}